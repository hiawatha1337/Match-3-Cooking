using System.Collections;
using UnityEngine;

public class GameBoard : MonoBehaviour
{
    public int width;
    public int height;
    public GameObject tilePrefab;
    public GameObject[] gamePieces;
    private GameObject[,] gamePiecesGrid;

    void Start()
    {
        gamePiecesGrid = new GameObject[width, height];
        SetupBoard();
    }

    private void SetupBoard()
    {
        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                // Instantiate a background tile
                GameObject tile = Instantiate(tilePrefab, new Vector2(x, y), Quaternion.identity);
                tile.transform.parent = transform;

                // Instantiate a random game piece
                int randomIndex = Random.Range(0, gamePieces.Length);
                GameObject piece = Instantiate(gamePieces[randomIndex], new Vector2(x, y), Quaternion.identity);
                piece.transform.parent = transform;

                gamePiecesGrid[x, y] = piece;
            }
        }
    }

    public void SpawnNewPiece(int x, int y)
    {
        int randomIndex = Random.Range(0, gamePieces.Length);
        GameObject newPiece = Instantiate(gamePieces[randomIndex], new Vector2(x, y), Quaternion.identity);
        newPiece.transform.parent = transform;
        gamePiecesGrid[x, y] = newPiece;
    }
    public bool CheckForPossibleMatches()
    {
        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                GameObject currentPiece = gamePiecesGrid[x, y];

                if (x < width - 1)
                {
                    GameObject rightNeighbor = gamePiecesGrid[x + 1, y];
                    if (currentPiece.tag == rightNeighbor.tag)
                    {
                        if (y < height - 1)
                        {
                            GameObject upNeighbor = gamePiecesGrid[x, y + 1];
                            if (rightNeighbor.tag == upNeighbor.tag)
                            {
                                return true;
                            }
                        }
                        if (y > 0)
                        {
                            GameObject downNeighbor = gamePiecesGrid[x, y - 1];
                            if (rightNeighbor.tag == downNeighbor.tag)
                            {
                                return true;
                            }
                        }
                    }
                }

                if (y < height - 1)
                {
                    GameObject upNeighbor = gamePiecesGrid[x, y + 1];
                    if (currentPiece.tag == upNeighbor.tag)
                    {
                        if (x < width - 1)
                        {
                            GameObject rightNeighbor = gamePiecesGrid[x + 1, y];
                            if (upNeighbor.tag == rightNeighbor.tag)
                            {
                                return true;
                            }
                        }
                        if (x > 0)
                        {
                            GameObject leftNeighbor = gamePiecesGrid[x - 1, y];
                            if (upNeighbor.tag == leftNeighbor.tag)
                            {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    public IEnumerator ResetBoard()
    {
        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                if (gamePiecesGrid[x, y] != null)
                {
                    Destroy(gamePiecesGrid[x, y]);
                }
            }
        }
        yield return null;
        SetupBoard();
    }

}
