using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
public class GameManager : MonoBehaviour
{
    public GameBoard board;
    public TextMeshProUGUI turnCounterText;
    public GameObject reshufflePanel;

    private GameObject startingPiece;
    private List<GameObject> selectedPieces;
    private Vector2 currentMousePosition;
    private SpriteRenderer selectedSpriteRenderer;
    private Color redColor = new Color(1f, 0f, 0f, 1f);
    private int turnCounter = 0;

    void Start()
    {
        board = FindObjectOfType<GameBoard>();
        selectedPieces = new List<GameObject>();
        selectedSpriteRenderer = new GameObject("SelectedSpriteRenderer").AddComponent<SpriteRenderer>();
        selectedSpriteRenderer.color = redColor;
        selectedSpriteRenderer.enabled = false;
        reshufflePanel.SetActive(false);
        StartCoroutine(CheckForReshuffle());

    }

    void Update()
    {
        currentMousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);

        if (Input.GetMouseButtonDown(0))
        {
            startingPiece = GetPieceAtMousePosition();

            if (startingPiece != null)
            {
                selectedPieces.Clear();
                selectedPieces.Add(startingPiece);
                selectedSpriteRenderer.enabled = true;
                selectedSpriteRenderer.transform.position = startingPiece.transform.position;
                startingPiece.GetComponent<SpriteRenderer>().color = redColor;
            }
        }

        if (Input.GetMouseButton(0) && startingPiece != null)
        {
            GameObject currentPiece = GetPieceAtMousePosition();

            if (currentPiece != null && !selectedPieces.Contains(currentPiece))
            {
                if (IsNeighboringPiece(currentPiece) && currentPiece.tag == startingPiece.tag)
                {
                    selectedPieces.Add(currentPiece);
                    currentPiece.GetComponent<SpriteRenderer>().color = redColor;
                }
            }
            else if (currentPiece != null && selectedPieces.Contains(currentPiece))
            {
                int currentIndex = selectedPieces.IndexOf(currentPiece);
                for (int i = selectedPieces.Count - 1; i > currentIndex; i--)
                {
                    GameObject deselectedPiece = selectedPieces[i];
                    deselectedPiece.GetComponent<SpriteRenderer>().color = Color.white;
                    selectedPieces.Remove(deselectedPiece);
                }
            }
        }

        if (Input.GetMouseButtonUp(0))
        {
            if (selectedPieces.Count >= 3)
            {
                foreach (GameObject piece in selectedPieces)
                {
                    int x = Mathf.RoundToInt(piece.transform.position.x);
                    int y = Mathf.RoundToInt(piece.transform.position.y);

                    Destroy(piece);
                    board.SpawnNewPiece(x, y);
                }

                // Increment turnCounter and update the UI
                turnCounter++;
                turnCounterText.SetText($"Turns: {turnCounter}");
            }

            // reset the color of all selected pieces
            foreach (GameObject piece in selectedPieces)
            {
                piece.GetComponent<SpriteRenderer>().color = Color.white;
            }

            selectedPieces.Clear();
            startingPiece = null;
            selectedSpriteRenderer.enabled = false;
        }

        // update the position of the selection sprite
        if (startingPiece != null)
        {
            selectedSpriteRenderer.transform.position = startingPiece.transform.position;
        }

        if (!board.CheckForPossibleMatches())
        {
            board.ResetBoard();
        }
    }

    GameObject GetPieceAtMousePosition()
    {
        int layerMask = 1 << LayerMask.NameToLayer("Ingredient");
        RaycastHit2D hit = Physics2D.Raycast(currentMousePosition, Vector2.zero, Mathf.Infinity, layerMask);

        if (hit.collider != null)
        {
            return hit.collider.gameObject;
        }

        return null;
    }

    bool IsNeighboringPiece(GameObject piece)
    {
        if (selectedPieces.Count > 0)
        {
            GameObject lastPiece = selectedPieces[selectedPieces.Count - 1];
            float distance = Vector2.Distance(lastPiece.transform.position, piece.transform.position);

            if (distance <= 1.1f && piece.tag == startingPiece.tag)
            {
                return true;
            }
        }

        return false;
    }

    IEnumerator ShowReshuffleMessage()
    {
        reshufflePanel.SetActive(true);
        yield return new WaitForSeconds(2f);
        reshufflePanel.SetActive(false);
    }
    IEnumerator CheckForReshuffle()
    {
        while (true)
        {
            yield return new WaitForSeconds(1f); // Check for reshuffle every second

            if (!board.CheckForPossibleMatches())
            {
                StartCoroutine(ShowReshuffleMessage());
                yield return board.ResetBoard();
            }
        }
    }

}
