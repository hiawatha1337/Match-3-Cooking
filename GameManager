using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
public class GameManager : MonoBehaviour
{
    public GameBoard board;
    public TextMeshProUGUI turnCounterText;
    public GameObject reshufflePanel;
    public SimpleScoringSystem scoringSystem;
    public float gameTimeLimit = 60f; // Game time limit in seconds
    private float elapsedTime = 0f; // To track elapsed time
    public TextMeshProUGUI timeLimitText; // To display the remaining time
    public TextMeshProUGUI totalScoreText; // To display the total score
    public UIManager uiManager;
    public PowerUpManager powerUpManager;
    public GameObject endingScreen;

    private GameObject startingPiece;
    private List<GameObject> selectedPieces;
    private Vector2 currentMousePosition;
    private SpriteRenderer selectedSpriteRenderer;
    private Color redColor = new Color(1f, 0f, 0f, 1f);
    private int turnCounter = 0;
    private bool isGameOver = false;
    private bool gameStarted = false;

    void Start()
    {
        board = FindObjectOfType<GameBoard>();
        selectedPieces = new List<GameObject>();
        selectedSpriteRenderer = new GameObject("SelectedSpriteRenderer").AddComponent<SpriteRenderer>();
        selectedSpriteRenderer.color = redColor;
        selectedSpriteRenderer.enabled = false;
        reshufflePanel.SetActive(false);
        StartCoroutine(CheckForReshuffle());
        scoringSystem = FindObjectOfType<SimpleScoringSystem>();
        powerUpManager = FindObjectOfType<PowerUpManager>();
    }

    void Update()
    {
        if (!isGameOver && gameStarted)
        {
            elapsedTime += Time.deltaTime;

            if (elapsedTime >= gameTimeLimit)
            {
                // Time's up! Handle game over logic here.
                Debug.Log("Time's up!");
                isGameOver = true;
                uiManager.ShowEndGameScreen();
                return;
            }

            timeLimitText.SetText($"Time: {(gameTimeLimit - elapsedTime):0}");
            totalScoreText.SetText($"Total Score: {scoringSystem.GetTotalScore()}");
            currentMousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);

            if (Input.GetMouseButtonDown(0))
            {
                startingPiece = GetPieceAtMousePosition();

                if (startingPiece != null)
                {
                    selectedPieces.Clear();
                    selectedPieces.Add(startingPiece);
                    selectedSpriteRenderer.enabled = true;
                    selectedSpriteRenderer.transform.position = startingPiece.transform.position;
                    startingPiece.GetComponent<SpriteRenderer>().color = redColor;
                }
            }

            if (Input.GetMouseButton(0) && startingPiece != null)
            {
                GameObject currentPiece = GetPieceAtMousePosition();

                if (currentPiece != null && !selectedPieces.Contains(currentPiece))
                {
                    if (IsNeighboringPiece(currentPiece) && currentPiece.tag == startingPiece.tag)
                    {
                        selectedPieces.Add(currentPiece);
                        currentPiece.GetComponent<SpriteRenderer>().color = redColor;
                    }
                }
                else if (currentPiece != null && selectedPieces.Contains(currentPiece))
                {
                    int currentIndex = selectedPieces.IndexOf(currentPiece);
                    for (int i = selectedPieces.Count - 1; i > currentIndex; i--)
                    {
                        GameObject deselectedPiece = selectedPieces[i];
                        deselectedPiece.GetComponent<SpriteRenderer>().color = Color.white;
                        selectedPieces.Remove(deselectedPiece);
                    }
                }
            }

            if (Input.GetMouseButtonUp(0))
            {
                if (selectedPieces.Count >= 3)
                {
                    foreach (GameObject piece in selectedPieces)
                    {
                        int x = Mathf.RoundToInt(piece.transform.position.x);
                        int y = Mathf.RoundToInt(piece.transform.position.y);

                        Destroy(piece);
                        board.SpawnNewPiece(x, y);
                    }

                    // Apply power-up effect if active
                    bool powerUpActive = powerUpManager.UsePowerUp();
                    scoringSystem.AddPoints(startingPiece.tag, selectedPieces.Count, powerUpActive);

                    // Increment turnCounter and update the UI
                    turnCounter++;
                    turnCounterText.SetText($"Turns: {turnCounter}");
                }

                // reset the color of all selected pieces
                foreach (GameObject piece in selectedPieces)
                {
                    piece.GetComponent<SpriteRenderer>().color = Color.white;
                }

                selectedPieces.Clear();
                startingPiece = null;
                selectedSpriteRenderer.enabled = false;
            }

            // update the position of the selection sprite
            if (startingPiece != null)
            {
                selectedSpriteRenderer.transform.position = startingPiece.transform.position;
            }

            if (!board.CheckForPossibleMatches())
            {
                board.ResetBoard();
            }

            if (CheckLevelCompletion())
            {
                // Trigger level completion actions (e.g., show a victory screen)
            }

            if (scoringSystem.AreAllSlidersFull())
            {
                // Add your level-ending code here
            }
        }
    }
    public void StartGame()
    {
        gameStarted = true;
        // You can also hide the starting screen here
    }

    GameObject GetPieceAtMousePosition()
    {
        int layerMask = 1 << LayerMask.NameToLayer("Ingredient");
        RaycastHit2D hit = Physics2D.Raycast(currentMousePosition, Vector2.zero, Mathf.Infinity, layerMask);

        if (hit.collider != null)
        {
            return hit.collider.gameObject;
        }

        return null;
    }

    bool IsNeighboringPiece(GameObject piece)
    {
        if (selectedPieces.Count > 0)
        {
            GameObject lastPiece = selectedPieces[selectedPieces.Count - 1];
            float distance = Vector2.Distance(lastPiece.transform.position, piece.transform.position);

            if (distance <= 1.1f && piece.tag == startingPiece.tag)
            {
                return true;
            }
        }

        return false;
    }

    IEnumerator ShowReshuffleMessage()
    {
        reshufflePanel.SetActive(true);
        yield return new WaitForSeconds(2f);
        reshufflePanel.SetActive(false);
    }
    IEnumerator CheckForReshuffle()
    {
        while (true)
        {
            yield return new WaitForSeconds(1f); // Check for reshuffle every second

            if (!board.CheckForPossibleMatches())
            {
                StartCoroutine(ShowReshuffleMessage());
                yield return board.ResetBoard();
            }
        }
    }
    public bool CheckLevelCompletion()
    {
        int maxScore = 100; // Set this to the maximum score needed for the level
        foreach (string ingredientTag in board.currentLevelIngredients)
        {
            int currentScore = scoringSystem.GetPoints(ingredientTag);
            if (currentScore < maxScore)
            {
                return false;
            }
        }
        return true;
    }
    public void ResetGame()
    {
        // Reset the board
        board.ResetBoard();

        // Reset the timer
        elapsedTime = 0f;

        // Reset the turn counter
        turnCounter = 0;
        turnCounterText.SetText($"Turns: {turnCounter}");

        // Reset the game state
        isGameOver = false;
        gameStarted = false;

        scoringSystem.ResetIngredientPoints();
        scoringSystem.ResetSliders();
        powerUpManager.ResetPowerUps();

        endingScreen.SetActive(false);

        // Start the game again
        StartGame();
    }

    public void SaveHighscore(string playerName)
    {
        int currentScore = scoringSystem.GetTotalScore();
        for (int i = 1; i <= 10; i++)
        {
            if (!PlayerPrefs.HasKey($"Highscore{i}"))
            {
                PlayerPrefs.SetInt($"Highscore{i}", currentScore);
                PlayerPrefs.SetString($"HighscorePlayer{i}", playerName);
                break;
            }
            else
            {
                int savedScore = PlayerPrefs.GetInt($"Highscore{i}");
                if (currentScore > savedScore)
                {
                    // Shift the lower scores down
                    for (int j = 10; j > i; j--)
                    {
                        int scoreToShift = PlayerPrefs.GetInt($"Highscore{j - 1}");
                        string playerToShift = PlayerPrefs.GetString($"HighscorePlayer{j - 1}");

                        PlayerPrefs.SetInt($"Highscore{j}", scoreToShift);
                        PlayerPrefs.SetString($"HighscorePlayer{j}", playerToShift);
                    }

                    PlayerPrefs.SetInt($"Highscore{i}", currentScore);
                    PlayerPrefs.SetString($"HighscorePlayer{i}", playerName);
                    break;
                }
            }
        }
        PlayerPrefs.Save();
    }

}
